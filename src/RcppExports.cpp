// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// get_gametes_cpp
NumericVector get_gametes_cpp(double g);
RcppExport SEXP _simsimqt_get_gametes_cpp(SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(get_gametes_cpp(g));
    return rcpp_result_gen;
END_RCPP
}
// get_inherited_genotype_vector
NumericVector get_inherited_genotype_vector(NumericVector mother_geno, NumericVector father_geno);
RcppExport SEXP _simsimqt_get_inherited_genotype_vector(SEXP mother_genoSEXP, SEXP father_genoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type mother_geno(mother_genoSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type father_geno(father_genoSEXP);
    rcpp_result_gen = Rcpp::wrap(get_inherited_genotype_vector(mother_geno, father_geno));
    return rcpp_result_gen;
END_RCPP
}
// mutate_geno
int mutate_geno(int geno, bool allele1_mutates, bool allele2_mutates);
RcppExport SEXP _simsimqt_mutate_geno(SEXP genoSEXP, SEXP allele1_mutatesSEXP, SEXP allele2_mutatesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type geno(genoSEXP);
    Rcpp::traits::input_parameter< bool >::type allele1_mutates(allele1_mutatesSEXP);
    Rcpp::traits::input_parameter< bool >::type allele2_mutates(allele2_mutatesSEXP);
    rcpp_result_gen = Rcpp::wrap(mutate_geno(geno, allele1_mutates, allele2_mutates));
    return rcpp_result_gen;
END_RCPP
}
// mutate_genotypes_per_locus
NumericMatrix mutate_genotypes_per_locus(NumericMatrix geno, double mutation_rate);
RcppExport SEXP _simsimqt_mutate_genotypes_per_locus(SEXP genoSEXP, SEXP mutation_rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type geno(genoSEXP);
    Rcpp::traits::input_parameter< double >::type mutation_rate(mutation_rateSEXP);
    rcpp_result_gen = Rcpp::wrap(mutate_genotypes_per_locus(geno, mutation_rate));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_simsimqt_get_gametes_cpp", (DL_FUNC) &_simsimqt_get_gametes_cpp, 1},
    {"_simsimqt_get_inherited_genotype_vector", (DL_FUNC) &_simsimqt_get_inherited_genotype_vector, 2},
    {"_simsimqt_mutate_geno", (DL_FUNC) &_simsimqt_mutate_geno, 3},
    {"_simsimqt_mutate_genotypes_per_locus", (DL_FUNC) &_simsimqt_mutate_genotypes_per_locus, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_simsimqt(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
